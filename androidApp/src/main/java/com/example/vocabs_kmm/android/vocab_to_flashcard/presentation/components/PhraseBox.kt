package com.example.vocabs_kmm.android.vocab_to_flashcard.presentation.components

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Surface
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.graphics.Outline
import androidx.compose.ui.graphics.Path
import androidx.compose.ui.graphics.Shape
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Density
import androidx.compose.ui.unit.LayoutDirection
import androidx.compose.ui.unit.dp
import com.example.vocabs_kmm.android.core.presentation.theme.LightGreen
import com.example.vocabs_kmm.android.core.presentation.theme.VocabsTheme
import com.example.vocabs_kmm.vocab_to_flashcard.domain.vocab_to_phrase.ExamplePhrase

@Composable
fun PhraseTextBoxWithCurvedBottomEdge(modifier: Modifier = Modifier, phrase: ExamplePhrase) {
    Surface(
        shape = RectangleWithCurvedBottomEdgeShape(),
        color = MaterialTheme.colors.surface,
        modifier = modifier

    ) {
        Box(
            modifier = modifier
                .fillMaxSize()
                .padding(top = 24.dp, start = 16.dp, end = 16.dp, bottom = 16.dp),
            contentAlignment = Alignment.TopCenter
        ) {
            Text(
                text = buildAnnotatedString {
                    append(phrase.beforeVocab)
                    withStyle(SpanStyle(color = LightGreen)) {
                        append(phrase.vocab)
                    }
                    append(phrase.afterVocab)
                },
                style = MaterialTheme.typography.body2,
                color = MaterialTheme.colors.onSurface
            )
        }
    }

}

class RectangleWithCurvedBottomEdgeShape() : Shape {
    override fun createOutline(
        size: Size, layoutDirection: LayoutDirection, density: Density
    ): Outline {
        return Outline.Generic(
            path = drawRectangleWithCurvedBottomPath(size)
        )
    }
}

fun drawRectangleWithCurvedBottomPath(size: Size): Path {
    return Path().apply {
        reset()
        lineTo(size.width, 0f)
        lineTo(size.width, size.height)
        quadraticBezierTo(x1 = size.width / 2f, y1 = size.height * 1.15f, x2 = 0f, y2 = size.height)
        close()
    }
}

@Preview
@Composable
fun PhraseTextBoxPreview() {
    VocabsTheme {
        Box(Modifier.height(200.dp)) {
            PhraseTextBoxWithCurvedBottomEdge(phrase = ExamplePhrase(beforeVocab = "This is an ", vocab = "example", afterVocab = " that explains a word and was generated by ai."))
        }
    }
}